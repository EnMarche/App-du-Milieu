name: Continuous Integration & Deployment

on:
    push:
        branches: [ master ]
        paths:
          - '**.py'
          - 'Dockerfile'
          - 'requirements.txt'
    pull_request:
    release:
        types: [ published ]


# General Environments variables
env:
    # Google Cloud Env
    GCP_REGISTRY_PROJECT_ID: ${{ secrets.GCP_REGISTRY_PROJECT_ID }}
    GCP_ZONE: ${{ secrets.GCP_ZONE }}

    # Databases
    DB_USER: ${{ secrets.DB_USER }}
    # BO
    DB_READ: ${{ secrets.DB_NAME}}
    # CRM
    SQL_INST_PG: ${{ secrets.SQL_INST_CRM }}
    DB_NAME_PG: ${{ secrets.DB_NAME_CRM }}

    # Image Env
    IMAGE: app-du-milieu
    TAG: ${{ github.sha }}


jobs:
    Build:
        name: Build app
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Restore node_modules from cache
                uses: actions/cache@v2
                with:
                    path: '**/node_modules'
                    key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-modules-
            -   name: Install deps
                run: yarn

    Tests:
        name: Test app
        runs-on: ubuntu-latest
        needs: [ Build ]

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.9'
                architecture: 'x64'

            - name: Get Cache
              uses: actions/cache@v2
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-
                  ${{ runner.os }}-

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install wheel
                pip install -r requirements.txt

            - name: Pylint
              run: |
                pip install pylint
                python -m pylint --fail-under=10 `find -regextype egrep -regex '(.*.py)$'` |
                tee pylint.txt

            - name: Flake8
              run: |
                pip install flake8
                flake8 --exit-zero --ignore=E501,W505 .

            #- name: PyTest
            #  run: |
            #    pip install pytest
            #    pip install pytest-cov
            #    python -m pytest --doctest-modules --junitxml=junit/test-results.xml --cov=./ --cov-report=xml --cov-report=html


    BuildImage:
        name: Build image üçæ & üöÄ
        runs-on: ubuntu-latest
        needs: [ Tests ]

        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.event.workflow_run.head_branch }}

            -   name: Set up Cloud credentials
                uses: google-github-actions/setup-gcloud@master
                with:
                    project_id: ${{ secrets.GCP_REGISTRY_PROJECT_ID }}
                    service_account_key: ${{ secrets.GCP_REGISTRY_SA_KEY }}
                    export_default_credentials: true

            -   name: Build
                run: |-
                    gcloud --quiet auth configure-docker
                    docker build \
                        --tag "eu.gcr.io/$GCP_REGISTRY_PROJECT_ID/$IMAGE:$TAG" \
                        --tag "eu.gcr.io/$GCP_REGISTRY_PROJECT_ID/$IMAGE:latest" \
                        .
            -   name: Publish
                run: docker push eu.gcr.io/$GCP_REGISTRY_PROJECT_ID/$IMAGE --all-tags


    DeployStaging:
        name: Deploy STAGING üçæ
        runs-on: ubuntu-latest
        needs: [ BuildImage ]
        environment: staging
        if: github.event.ref == 'refs/heads/master'

        steps:
            # Setup gcloud CLI
            - name: Set up Cloud credentials
              uses: google-github-actions/setup-gcloud@master
              with:
                project_id: ${{ secrets.GCP_PROJECT_ID }}
                service_account_key: ${{ secrets.GCP_SA_KEY }}
                export_default_credentials: true

            -   name: Deploy to Cloud Run
                env:
                    # Google Cloud Env
                    GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
                    # Cloud SQL Env
                    SQL_INST: ${{secrets.SQL_INST}}
                    DB_PASS: ${{ secrets.DB_PASS }}
                    DB_PASS_PG: ${{secrets.DB_CRM_PASS}}

                run : |-
                    gcloud run deploy app-du-milieu \
                    --image eu.gcr.io/$GCP_REGISTRY_PROJECT_ID/$IMAGE:$TAG \
                    --platform managed \
                    --region $GCP_ZONE \
                    --allow-unauthenticated \
                    --ingress internal-and-cloud-load-balancing \
                    --memory 512Mi \
                    --cpu 1 \
                    --set-cloudsql-instances=$SQL_INST,$SQL_INST_PG \
                    --set-env-vars=DB_USER=$DB_USER,DB_PASS=$DB_PASS,DB_READ=$DB_READ,CLOUDSQL_CONN=$GCP_PROJECT_ID:$GCP_ZONE:$SQL_INST,DB_USER_PG=$DB_USER,DB_PASS_PG=$DB_PASS_PG,DB_NAME_PG=$DB_NAME_PG,CLOUDSQL_CONN_PG=$GCP_PROJECT_ID:$GCP_ZONE:$SQL_INST_PG


    DeployProduction:
        name: Deploy PRODUCTION üöÄ
        runs-on: ubuntu-latest
        needs: [ BuildImage ]
        environment: production
        if: github.event_name == 'release'

        steps:
            # Setup gcloud CLI
            - name: Set up Cloud credentials
              uses: google-github-actions/setup-gcloud@master
              with:
                project_id: ${{ secrets.GCP_PROJECT_ID }}
                service_account_key: ${{ secrets.GCP_SA_KEY }}
                export_default_credentials: true

            -   name: Deploy to Cloud Run
                env:
                    # Google Cloud Env
                    GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
                    # Cloud SQL Env
                    SQL_INST: ${{secrets.SQL_INST}}
                    DB_PASS: ${{ secrets.DB_PASS }}
                    DB_PASS_PG: ${{secrets.DB_CRM_PASS}}

                run : |-
                    gcloud run deploy app-du-milieu \
                    --image eu.gcr.io/$GCP_PROJECT_ID/$IMAGE:$TAG \
                    --platform managed \
                    --region $GCP_ZONE \
                    --allow-unauthenticated \
                    --ingress internal-and-cloud-load-balancing \
                    --memory 2Gi \
                    --cpu 4 \
                    --min-instances 1 \
                    --set-cloudsql-instances $SQL_INST,$SQL_INST_PG \
                    --set-env-vars=DB_USER=$DB_USER,DB_PASS=$DB_PASS,DB_READ=$DB_READ,CLOUDSQL_CONN=$GCP_PROJECT_ID:$GCP_ZONE:$SQL_INST,DB_USER_PG=$DB_USER,DB_PASS_PG=$DB_PASS_PG,DB_NAME_PG=$DB_NAME_PG,CLOUDSQL_CONN_PG=$GCP_PROJECT_ID:$GCP_ZONE:$SQL_INST_PG
