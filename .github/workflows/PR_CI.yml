name: Pull Request CI

on:
  pull_request:
    branches: [ master ]
    paths:
      - '**.py'
      - 'Dockerfile'
      - 'requirements.txt'

jobs:
    Install:
        name: Install Dependencies
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.9'
                architecture: 'x64'

            - name: Get Cache
              uses: actions/cache@v2
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-
                  ${{ runner.os }}-

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install wheel
                pip install -r requirements.txt

    Pylint:
        name: Pylint
        runs-on: ubuntu-latest
        needs: [ Install ]

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.9'
                architecture: 'x64'

            - name: Get Cache
              uses: actions/cache@v2
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-
                  ${{ runner.os }}-

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install wheel
                pip install -r requirements.txt
            - name: Pylint
              run: |
                pip install pylint
                python -m pylint --fail-under=10 `find -regextype egrep -regex '(.*.py)$'` |
                tee pylint.txt
    Flake8:
        name: Flake8
        runs-on: ubuntu-latest
        needs: [ Install ]

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.9'
                architecture: 'x64'

            - name: Get Cache
              uses: actions/cache@v2
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-
                  ${{ runner.os }}-

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install wheel
                pip install -r requirements.txt

            - name: Flake8
              run: |
                pip install flake8
                flake8 --exit-zero --ignore=E501,W505 .
    PyTest:
        name: PyTest
        runs-on: ubuntu-latest
        needs: [ Install ]

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.9'
                architecture: 'x64'

            - name: Get Cache
              uses: actions/cache@v2
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-
                  ${{ runner.os }}-

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install wheel
                pip install -r requirements.txt

            - name: PyTest
              run: |
                pip install pytest pytest-cov
                pip install codecov && codecov -t ${{ secrets.CODECOV_TOKEN }}
                python -m pytest --cov=./ && codecov -f .\coverage.xml


    OSSAR-Scan:
      runs-on: windows-latest

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run OSSAR
        uses: github/ossar-action@v1
        id: ossar

      - name: Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}
    Codacy:
      name: Codacy Security Scan
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Run Codacy Analysis CLI
          uses: codacy/codacy-analysis-cli-action@4.0.0
          with:
            project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
            verbose: true
            output: results.sarif
            format: sarif
            gh-code-scanning-compat: true
            max-allowed-issues: 2147483647

        - name: Upload SARIF results file
          uses: github/codeql-action/upload-sarif@v1
          with:
            sarif_file: results.sarif
