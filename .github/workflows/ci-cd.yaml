name: Continuous Integration & Deployment

on:
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [ published ]

env:
  IMAGE: ${{ secrets.GCP_HOST_GCR }}/${{ secrets.GCP_REGISTRY_PROJECT_ID }}/${{ secrets.GCP_GCR_REPOSITORY }}
  TAG: ${{ github.ref_name }}-${{ github.sha }}

jobs:
  test:
    name: Test app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: 'x64'

      - name: Get Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r requirements.txt

      - name: Pylint
        run: |
          pip install pylint
          python -m pylint --fail-under=10 `find -regextype egrep -regex '(.*.py)$'` |
          tee pylint.txt

      - name: Flake8
        run: |
          pip install flake8
          flake8 --exit-zero --ignore=E501,W505 .

  docker-build-push-gcr:
    name: Docker build & push on Google Cloud Registry
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event.ref == 'refs/heads/master' || github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY_GCR_PUSHER }}
          project_id: ${{ secrets.GCP_REGISTRY_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker to use the gcloud command-line tool
        run: |-
          gcloud --quiet auth configure-docker

      - name: Build the Docker image
        run: |-
          docker build . --compress --tag $IMAGE:$TAG

      - name: Push the Docker image to Google Container Registry
        run: |-
          docker push $IMAGE:$TAG
          gcloud container images add-tag $IMAGE:$TAG $IMAGE:latest --quiet

      - name: Cleanup old images on Google Container Registry
        run: |-
          limitDate=$(date "+%Y-%m-%d %H:%M:%S" -d "60 days ago")

          digests=$(gcloud container images list-tags $IMAGE \
          --filter="timestamp.datetime < '$limitDate'" \
          --format="get(digest)")

          for digest in $digests; do
          (
            gcloud container images delete --quiet --force-delete-tags $IMAGE@$digest
          )
          done

  deploy-staging:
    name: Deploy to Staging 🍾
    runs-on: ubuntu-latest
    needs: [ docker-build-push-gcr ]
    if: github.event.ref == 'refs/heads/master'
    environment: staging

    steps:
      - uses: google-github-actions/deploy-cloudrun@main
        with:
          credentials: ${{ secrets.GCP_SA_KEY_CLOUDRUN_DEPLOYER }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service: ${{ secrets.GCP_CLOUDRUN_SERVICE }}
          image: ${{ env.IMAGE }}
          region: ${{ secrets.GCP_ZONE }}

  deploy-prod:
      name: Deploy to Prod 🚀
      runs-on: ubuntu-latest
      needs: [ docker-build-push-gcr ]
      if: github.event_name == 'release'
      environment: production

      steps:
        - uses: google-github-actions/deploy-cloudrun@main
          with:
            credentials: ${{ secrets.GCP_SA_KEY_CLOUDRUN_DEPLOYER }}
            project_id: ${{ secrets.GCP_PROJECT_ID }}
            service: ${{ secrets.GCP_CLOUDRUN_SERVICE }}
            image: ${{ env.IMAGE }}
            region: ${{ secrets.GCP_ZONE }}
